#N canvas 110 141 577 507 10;
#X obj 153 116 list split 1;
#X obj 153 301 list;
#X obj 153 401 outlet;
#X text 168 96 time <midicommand> <data>;
#X text 198 308 now we have: time RECEIVER channel <command> <data>
;
#X obj 153 215 -;
#X msg 264 198 0;
#X obj 153 329 list prepend add;
#X obj 153 353 list trim;
#X obj 153 376 qlist;
#X obj 205 401 outlet;
#X obj 35 381 r \$0-qlist;
#X obj 35 432 outlet;
#X obj 153 28 inlet;
#X obj 34 328 r \$0-qlist-ctl;
#X text 265 325 add just inserts a new message to qlist;
#X text 22 273 delay receiver name >;
#X text 12 191 converts time to delay;
#N canvas 84 55 318 355 readMidiTextFile 0;
#X obj 36 -68 textfile;
#X obj 36 -98 until;
#X msg 88 -96 read \$1 \, rewind;
#X obj 36 -136 t b a b;
#X obj 82 -216 loadbang;
#X obj 82 -192 list append \$1;
#X obj 82 -170 select 0;
#X obj 36 -289 list trim;
#X obj 36 -266 route open;
#X obj 36 -183 list;
#X obj 103 -245 s \$0-qlist-ctl;
#X obj 34 -317 inlet;
#X obj 36 -29 outlet;
#X obj 124 -19 outlet;
#X connect 0 0 12 0;
#X connect 0 1 1 1;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 1 0;
#X connect 3 1 2 0;
#X connect 3 2 13 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X connect 6 1 3 0;
#X connect 7 0 8 0;
#X connect 8 0 9 0;
#X connect 8 1 10 0;
#X connect 9 0 3 0;
#X connect 11 0 7 0;
#X restore 153 57 pd readMidiTextFile;
#N canvas 752 330 450 300 algorithm 0;
#X text 32 14 If midicommand is noteon and velocity is zero don't prepend
any delay value to qlist. this means automatically output.;
#X text 29 58 If channel of present line is equal to previous line
then don't add any delay value to qlist message. BEcause a chord is
being played.;
#X text 29 108 If midicommand is different form a noteon then output
automatically.;
#X restore 439 391 pd algorithm;
#X obj 153 248 maybePrepend \$0-qlist;
#X text 19 248 maybe prepend a time.;
#N canvas 635 168 235 207 parseCommands 0;
#X obj 32 10 inlet;
#N canvas 347 55 911 724 get-command 0;
#X obj 57 120 moses 128;
#X floatatom 77 83 5 0 0 0 - - -, f 5;
#X obj 135 120 moses 144;
#X obj 135 177 - 128;
#X obj 230 179 - 144;
#X obj 57 27 inlet;
#X obj 385 397 outlet;
#X obj 230 119 moses 160;
#X text 255 435 Midi commands:;
#X text 266 508 176 + channel = cc;
#X text 266 531 192 + channel = pgm change;
#X text 271 551 224 + channel = pitch wheel;
#X obj 672 180 - 224;
#X obj 563 178 - 192;
#X obj 457 178 - 176;
#X text 263 489 160 + channel = polypressure;
#X obj 333 177 - 160;
#X obj 333 118 moses 176;
#X obj 457 118 moses 192;
#X obj 563 118 moses 224;
#X obj 672 120 moses 240;
#X msg 135 304 \$1 noteoff;
#X msg 230 304 \$1 noteon;
#X msg 332 305 \$1 polypressure;
#X msg 457 305 \$1 cc;
#X msg 563 300 \$1 pgm;
#X msg 672 301 \$1 pitchwheel;
#X text 261 451 128 + channel = note off;
#X text 262 470 144 + channel = note on;
#X text 448 449 returns channel of event /command;
#X connect 0 1 2 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 2 1 7 0;
#X connect 3 0 21 0;
#X connect 4 0 22 0;
#X connect 5 0 0 0;
#X connect 7 0 4 0;
#X connect 7 1 17 0;
#X connect 12 0 26 0;
#X connect 13 0 25 0;
#X connect 14 0 24 0;
#X connect 16 0 23 0;
#X connect 17 0 16 0;
#X connect 17 1 18 0;
#X connect 18 0 14 0;
#X connect 18 1 19 0;
#X connect 19 0 13 0;
#X connect 19 1 20 0;
#X connect 20 0 12 0;
#X connect 21 0 6 0;
#X connect 22 0 6 0;
#X connect 23 0 6 0;
#X connect 24 0 6 0;
#X connect 25 0 6 0;
#X connect 26 0 6 0;
#X restore 33 92 pd get-command;
#X obj 33 56 list split 1;
#X obj 33 122 list;
#X text 66 121 command note velocity;
#X obj 33 144 outlet;
#X connect 0 0 2 0;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 2 1 3 1;
#X connect 3 0 5 0;
#X restore 193 139 pd parseCommands;
#X obj 153 190 t f f;
#X obj 193 161 s \$0-midiCommand;
#X obj 339 124 r \$0-midiCommand;
#X obj 221 279 r \$0-midiCommand;
#N canvas 48 79 970 587 filterQlistAdd 0;
#X floatatom 417 194 5 0 0 0 - - -, f 5;
#X obj 417 238 tgl 15 0 empty empty is_eq_to_prev_ch? 17 7 0 10 -262144
-1 -1 1 1;
#X obj 417 168 cc_indexList 0;
#X obj 220 171 cc_indexList 1;
#X obj 220 238 cc_not;
#X obj 220 260 tgl 15 0 empty empty is_diff_from_noteon? 17 7 0 10
-262144 -1 -1 1 1;
#X obj 220 215 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 23 261 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#N canvas 0 22 200 288 isNoteWithVelDiffZero 0;
#X obj 35 13 inlet;
#X obj 35 148 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 35 180 cc_any;
#X obj 68 72 cc_indexList 3;
#X text 37 163 send velocity;
#X obj 35 99 cc_indexList 1;
#X obj 35 121 sel noteon;
#X obj 34 47 t a a;
#X obj 35 226 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 35 202 != 0;
#X obj 35 246 outlet;
#X connect 0 0 7 0;
#X connect 1 0 2 0;
#X connect 2 0 9 0;
#X connect 3 0 2 1;
#X connect 5 0 6 0;
#X connect 6 0 1 0;
#X connect 7 0 5 0;
#X connect 7 1 3 0;
#X connect 8 0 10 0;
#X connect 9 0 8 0;
#X restore 26 451 pd isNoteWithVelDiffZero;
#X obj 220 193 cc_equalToSymbol noteon;
#X text 261 279 i.e cc \, pgm \, etc.;
#X text 61 -22 qlist will output immediatly any message \, some messages
like note off and control changes or program changes we want to output
immediatly. So basically we have to decide when to prepend time values
to a message thats being added to a qlist. The toggles below should
decide if a time tag should be added. If one is off then all should
as they are mutually exclusive.;
#X obj 22 93 inlet;
#X obj 68 92 r \$0-testCommands;
#N canvas 929 97 453 384 testCommands 0;
#X msg 244 24 0 noteon 56 67;
#X msg 243 46 2 noteon 54 3;
#X msg 243 69 0 noteon 56 0;
#X obj 82 66 s \$0-testCommands;
#X msg 243 96 0 noteon 54 0;
#X text 13 241 If noteon vel diff from zero and channels have changed:
simply zero. If vel value differenct from zero but command is not a
note on then zero.;
#X msg 246 121 2 noteon 69 0;
#X msg 245 169 0 pgm 76 56;
#X msg 248 197 2 pgm 45 0;
#X msg 244 144 0 pgm 56 1;
#X msg 61 134 0 noteon 53 0;
#X msg 62 160 2 noteon 64 71;
#X msg 57 107 0 noteon 48 82;
#X text 20 285 If current channel is different from previous and current
note is on then 1;
#X msg 64 190 2 noteon 64 0;
#X connect 0 0 3 0;
#X connect 1 0 3 0;
#X connect 2 0 3 0;
#X connect 4 0 3 0;
#X connect 6 0 3 0;
#X connect 7 0 3 0;
#X connect 8 0 3 0;
#X connect 9 0 3 0;
#X connect 10 0 3 0;
#X connect 11 0 3 0;
#X connect 12 0 3 0;
#X connect 14 0 3 0;
#X restore 192 92 pd testCommands;
#X obj 23 232 != 0;
#X obj 23 210 cc_indexList 3;
#X obj 344 391 outlet;
#X text 21 482 Note on and equal channels -> prepend Note on and diff
channels -> depends: if previous note was off then prepend else dont.
;
#X obj 23 132 t anything anything anything anything, f 99;
#X obj 614 188 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#N canvas 120 101 442 506 chChangeWithVelDiff0 0;
#X floatatom 104 140 5 0 0 0 - - -, f 5;
#X obj 104 184 tgl 15 0 empty empty is_eq_to_prev_ch? 17 7 0 10 -262144
-1 -1 1 1;
#X obj 104 114 cc_indexList 0;
#X obj -68 111 cc_isEqualToPrevious;
#X obj 34 150 f;
#X obj -68 81 cc_indexList 3;
#X obj 34 172 == 0;
#X obj 34 194 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj -5 128 t b;
#X text -7 403 only throw 0 when a ch changed has arised and not sequence
of vel 0 #.;
#X obj 104 10 inlet;
#X obj 104 56 t anything anything;
#X text -8 436 not equal to previous and previous equal to vel zero.
Which means a sequence of velocities 0 #.;
#X obj 215 97 cc_indexList 3;
#X obj 103 289 outlet;
#X text -7 376 prepend if channel change and present note vel != 0
;
#X obj 104 161 cc_isEqualToPrevious;
#X obj 104 204 sel 0;
#X obj 103 239 f;
#X obj 215 119 clip 0 1;
#X obj 103 261 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 104 32 cc_gate noteon 1;
#X connect 0 0 16 0;
#X connect 1 0 17 0;
#X connect 2 0 0 0;
#X connect 3 0 8 0;
#X connect 3 1 4 1;
#X connect 4 0 6 0;
#X connect 5 0 3 0;
#X connect 6 0 7 0;
#X connect 8 0 4 0;
#X connect 10 0 21 0;
#X connect 11 0 2 0;
#X connect 11 1 13 0;
#X connect 13 0 19 0;
#X connect 16 0 1 0;
#X connect 17 0 18 0;
#X connect 18 0 20 0;
#X connect 19 0 18 1;
#X connect 20 0 14 0;
#X connect 21 0 11 0;
#X connect 21 0 5 0;
#X restore 614 166 pd chChangeWithVelDiff0;
#X obj 455 253 s \$0-chDidChange;
#X obj 23 281 spigot;
#X obj 56 257 r \$0-chDidChange;
#X obj 220 280 sel 1;
#X msg 220 302 0;
#X obj 417 215 cc_isEqualToPrevious;
#X obj 23 185 cc_gate noteon 1;
#X connect 0 0 27 0;
#X connect 1 0 22 0;
#X connect 2 0 0 0;
#X connect 3 0 9 0;
#X connect 4 0 5 0;
#X connect 5 0 25 0;
#X connect 6 0 4 0;
#X connect 7 0 23 0;
#X connect 9 0 6 0;
#X connect 12 0 19 0;
#X connect 13 0 19 0;
#X connect 15 0 7 0;
#X connect 16 0 15 0;
#X connect 19 0 28 0;
#X connect 19 1 3 0;
#X connect 19 2 2 0;
#X connect 19 3 21 0;
#X connect 20 0 17 0;
#X connect 21 0 20 0;
#X connect 23 0 17 0;
#X connect 24 0 23 1;
#X connect 25 0 26 0;
#X connect 26 0 17 0;
#X connect 27 0 1 0;
#X connect 28 0 16 0;
#X restore 339 149 pd filterQlistAdd;
#X obj 362 365 cc_indexList 3;
#X obj 362 387 == 0;
#X obj 362 409 sel 1;
#X obj 362 437 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X msg 362 457 next;
#X connect 0 0 23 0;
#X connect 0 1 22 0;
#X connect 1 0 7 0;
#X connect 5 0 20 0;
#X connect 6 0 5 1;
#X connect 7 0 8 0;
#X connect 8 0 9 0;
#X connect 9 0 2 0;
#X connect 9 1 10 0;
#X connect 11 0 12 0;
#X connect 13 0 18 0;
#X connect 14 0 9 0;
#X connect 18 0 0 0;
#X connect 18 1 6 0;
#X connect 20 0 1 0;
#X connect 22 0 24 0;
#X connect 23 0 5 1;
#X connect 23 1 5 0;
#X connect 25 0 27 0;
#X connect 26 0 1 1;
#X connect 27 0 20 1;
#X connect 28 0 29 0;
#X connect 29 0 30 0;
#X connect 30 0 31 0;
#X connect 31 0 32 0;
